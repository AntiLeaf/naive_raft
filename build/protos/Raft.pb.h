// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Raft.proto

#ifndef PROTOBUF_INCLUDED_Raft_2eproto
#define PROTOBUF_INCLUDED_Raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Raft_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Raft_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Raft_2eproto();
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
namespace google {
namespace protobuf {
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Message_message_type {
  Message_message_type_universal_t = 0,
  Message_message_type_request_vote_t = 1,
  Message_message_type_vote_t = 2,
  Message_message_type_set_leader_t = 3,
  Message_message_type_Message_message_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Message_message_type_Message_message_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Message_message_type_IsValid(int value);
const Message_message_type Message_message_type_message_type_MIN = Message_message_type_universal_t;
const Message_message_type Message_message_type_message_type_MAX = Message_message_type_set_leader_t;
const int Message_message_type_message_type_ARRAYSIZE = Message_message_type_message_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_message_type_descriptor();
inline const ::std::string& Message_message_type_Name(Message_message_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_message_type_descriptor(), value);
}
inline bool Message_message_type_Parse(
    const ::std::string& name, Message_message_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_message_type>(
    Message_message_type_descriptor(), name, value);
}
// ===================================================================

class Message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_message_type message_type;
  static const message_type universal_t =
    Message_message_type_universal_t;
  static const message_type request_vote_t =
    Message_message_type_request_vote_t;
  static const message_type vote_t =
    Message_message_type_vote_t;
  static const message_type set_leader_t =
    Message_message_type_set_leader_t;
  static inline bool message_type_IsValid(int value) {
    return Message_message_type_IsValid(value);
  }
  static const message_type message_type_MIN =
    Message_message_type_message_type_MIN;
  static const message_type message_type_MAX =
    Message_message_type_message_type_MAX;
  static const int message_type_ARRAYSIZE =
    Message_message_type_message_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  message_type_descriptor() {
    return Message_message_type_descriptor();
  }
  static inline const ::std::string& message_type_Name(message_type value) {
    return Message_message_type_Name(value);
  }
  static inline bool message_type_Parse(const ::std::string& name,
      message_type* value) {
    return Message_message_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 id_from = 1;
  void clear_id_from();
  static const int kIdFromFieldNumber = 1;
  ::google::protobuf::int32 id_from() const;
  void set_id_from(::google::protobuf::int32 value);

  // int32 id_to = 2;
  void clear_id_to();
  static const int kIdToFieldNumber = 2;
  ::google::protobuf::int32 id_to() const;
  void set_id_to(::google::protobuf::int32 value);

  // .Message.message_type type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Message_message_type type() const;
  void set_type(::Message_message_type value);

  // int32 value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_from_;
  ::google::protobuf::int32 id_to_;
  int type_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// int32 id_from = 1;
inline void Message::clear_id_from() {
  id_from_ = 0;
}
inline ::google::protobuf::int32 Message::id_from() const {
  // @@protoc_insertion_point(field_get:Message.id_from)
  return id_from_;
}
inline void Message::set_id_from(::google::protobuf::int32 value) {
  
  id_from_ = value;
  // @@protoc_insertion_point(field_set:Message.id_from)
}

// int32 id_to = 2;
inline void Message::clear_id_to() {
  id_to_ = 0;
}
inline ::google::protobuf::int32 Message::id_to() const {
  // @@protoc_insertion_point(field_get:Message.id_to)
  return id_to_;
}
inline void Message::set_id_to(::google::protobuf::int32 value) {
  
  id_to_ = value;
  // @@protoc_insertion_point(field_set:Message.id_to)
}

// .Message.message_type type = 3;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::Message_message_type Message::type() const {
  // @@protoc_insertion_point(field_get:Message.type)
  return static_cast< ::Message_message_type >(type_);
}
inline void Message::set_type(::Message_message_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Message.type)
}

// int32 value = 4;
inline void Message::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Message::value() const {
  // @@protoc_insertion_point(field_get:Message.value)
  return value_;
}
inline void Message::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Message.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Message_message_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message_message_type>() {
  return ::Message_message_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Raft_2eproto
